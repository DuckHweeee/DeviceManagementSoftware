@model DeviceManagementSoftware.Models.ViewModels.PaginatedResult<dynamic>
@{
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
    var currentAction = ViewContext.RouteData.Values["action"]?.ToString();
}

@if (Model.TotalPages > 1)
{
    <nav aria-label="Pagination Navigation">
        <ul class="pagination justify-content-center">
            <!-- Previous Page -->
            <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                @if (Model.HasPreviousPage)
                {
                    <a class="page-link" href="@Url.Action(currentAction, currentController, new { page = Model.PageNumber - 1, pageSize = Model.PageSize })">
                        <i class="fas fa-chevron-left me-1"></i>Previous
                    </a>
                }
                else
                {
                    <span class="page-link">
                        <i class="fas fa-chevron-left me-1"></i>Previous
                    </span>
                }
            </li>

            <!-- First Page -->
            @if (Model.PageNumber > 3)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action(currentAction, currentController, new { page = 1, pageSize = Model.PageSize })">1</a>
                </li>
                @if (Model.PageNumber > 4)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }

            <!-- Page Numbers -->
            @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
            {
                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                    @if (i == Model.PageNumber)
                    {
                        <span class="page-link">@i</span>
                    }
                    else
                    {
                        <a class="page-link" href="@Url.Action(currentAction, currentController, new { page = i, pageSize = Model.PageSize })">@i</a>
                    }
                </li>
            }

            <!-- Last Page -->
            @if (Model.PageNumber < Model.TotalPages - 2)
            {
                @if (Model.PageNumber < Model.TotalPages - 3)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" href="@Url.Action(currentAction, currentController, new { page = Model.TotalPages, pageSize = Model.PageSize })">@Model.TotalPages</a>
                </li>
            }

            <!-- Next Page -->
            <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                @if (Model.HasNextPage)
                {
                    <a class="page-link" href="@Url.Action(currentAction, currentController, new { page = Model.PageNumber + 1, pageSize = Model.PageSize })">
                        Next<i class="fas fa-chevron-right ms-1"></i>
                    </a>
                }
                else
                {
                    <span class="page-link">
                        Next<i class="fas fa-chevron-right ms-1"></i>
                    </span>
                }
            </li>
        </ul>
    </nav>

    <!-- Pagination Info -->
    <div class="d-flex justify-content-between align-items-center mt-3">
        <small class="text-muted">
            Showing @Model.StartIndex to @Model.EndIndex of @Model.TotalCount entries
        </small>
        <div class="d-flex align-items-center">
            <small class="text-muted me-2">Items per page:</small>
            <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                <option value="6">6</option>
                <option value="12">12</option>
                <option value="24">24</option>
                <option value="48">48</option>
            </select>
        </div>
    </div>
}

<script>
    function changePageSize(pageSize) {
        const url = new URL(window.location);
        url.searchParams.set('pageSize', pageSize);
        url.searchParams.set('page', '1'); // Reset to first page
        window.location.href = url.toString();
    }
    
    // Set the correct page size on page load
    document.addEventListener('DOMContentLoaded', function() {
        var pageSizeSelect = document.querySelector('select[onchange="changePageSize(this.value)"]');
        if (pageSizeSelect) {
            pageSizeSelect.value = '@Model.PageSize';
        }
    });
</script>
